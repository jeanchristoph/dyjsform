import ValidatorService from"./ValidatorService.js";export default class JsonService{constructor(){this._json=[];this._outputJson=[]}get json(){return JSON.parse(JSON.stringify(this._json))}getJsonData(){return JSON.parse(JSON.stringify(this._json.map((row=>row.filter((field=>!field.name.startsWith("dyjsform_action_")))))))}set json(json){switch(typeof json){case"string":this._json=this.strToJson(json);break;default:this._json=json;break}this.outputJson=this.getJsonData()}addRow(entity){const updatedJson=this.json;updatedJson.push(entity);this.json=updatedJson;return this}removeRow(rowNumber){const updatedJson=this.json;updatedJson.splice(rowNumber,1);this.json=updatedJson;return this}get outputJson(){return this._outputJson}set outputJson(json){this._outputJson=this.reduceByNameValue(json)}isJsonString(str){try{JSON.parse(str)}catch(e){console.error(e);return false}return true}jsonToStr(jsonObject){return JSON.stringify(jsonObject,null,2)}strToJson(str){try{return JSON.parse(str)}catch(error){console.error("Erreur lors du parsing JSON :",error);return null}}reduceByNameValue(json){var ReducedJson=[];for(const row of json){let rowJson=[];for(let field of row){rowJson.push({[field["name"]]:field["value"]})}ReducedJson.push(rowJson)}return ReducedJson}populateJson(json){while(this._json.length<json.length){const templateRow=this._json[this._json.length-1].map((field=>({...field,value:""})));this._json.push(templateRow)}this._json=this._json.map(((row,rowIndex)=>{if(json[rowIndex]){return row.map((field=>{const correspondingField=json[rowIndex].find((f=>f.name===field.name));return correspondingField?{...field,value:correspondingField.value}:field}))}return row}))}loadJson(){let entitiesArray=[];let entityArray=[];if(document.querySelector("#dyjsform_options")){const jsonString=document.querySelector("#dyjsform_options").value;if(jsonString){try{const jsonString=document.querySelector("#dyjsform_options").value}catch(error){console.error("Erreur lors de l'analyse du JSON : ",error)}}}return entityArray}updateJsonByField(rowIndex,fieldName,value){let json=this.json;console.log(json);json[rowIndex].forEach((element=>{if(element.name===fieldName){element.value=value}}));const result=this.validate(json,rowIndex);if(result.success){console.log("result.success");console.log("errorClean");json=this.errorClean(json)}else{json=this.displayError(result,json,rowIndex)}this.json=json;console.log(this.json);return result}validate(json){const validationResult=ValidatorService.validateMaxCount(json);if(validationResult.valid){console.log("Validation réussie : Aucun conflit détecté.");return{success:true,errors:null}}else{console.log("Validation échouée :",validationResult);return{success:false,errors:validationResult.errors}}}displayError(validationResult,json,rowIndex=null){console.log(validationResult);console.log("displayError");if(rowIndex!==null){validationResult.errors.forEach((errorGroup=>{const error=errorGroup.occurrences.find((err=>err.rowIndex===rowIndex));console.log("errorGroup.occurrences");console.log(errorGroup.occurrences);console.log("rowIndex");console.log(rowIndex);console.log("error");console.log(error);if(error){const entity=json[rowIndex].find((entity=>entity.name===error.name));console.log("entity");console.log(entity);if(entity){console.log("entity.error");console.log(entity.error);console.log("entity.value");console.log(entity.value);entity.error=errorGroup.message;entity.value=""}console.log("json");console.log(json)}}))}else{validationResult.errors.forEach((errorGroup=>{errorGroup.occurrences.forEach((error=>{const entity=json[error.rowIndex].find((ent=>ent.name===error.name));if(entity){entity.error=errorGroup.message}}))}))}return json}errorClean(json){json=json.map((row=>row.map((entity=>({...entity,error:""})))));return json}}