export default class DebugService{constructor(instance,options=[]){const proxy=new Proxy(instance,{get(target,propKey){const originalMethod=target[propKey];const now=new Date;const formattedTime=`${now.toLocaleTimeString("fr-FR")}.${now.getMilliseconds().toString().padStart(3,"0")}`;if(typeof originalMethod==="function"){return function(...args){const constructorName=target.constructor&&target.constructor.name?target.constructor.name:Object.getPrototypeOf(target)?Object.getPrototypeOf(target).constructor.name:"unknown";if(["symbol"].includes(propKey)){}else if(["symbol"].includes(propKey)||["Array","Date"].includes(constructorName)){}else{console.log(`[${formattedTime}] ${constructorName} -> ${propKey}()`)}return originalMethod.apply(target,args)}}if(originalMethod&&typeof originalMethod==="object"){return new DebugService(originalMethod)}return originalMethod}});for(const key of Object.getOwnPropertyNames(Object.getPrototypeOf(instance)||{})){if(typeof instance[key]==="function"&&key!=="constructor"){instance[key]=instance[key].bind(proxy)}}return proxy}}